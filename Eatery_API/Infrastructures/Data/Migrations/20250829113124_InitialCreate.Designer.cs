// <auto-generated />
using System;
using Eatery_API.Infrastructures.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Eatery_API.Infrastructures.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250829113124_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Eatery_API.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<bool>("IsActived")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR(15)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("VARCHAR(5)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<Guid>("DishId")
                        .HasColumnType("UUID");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("UUID");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.CartTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<Guid>("CartId")
                        .HasColumnType("UUID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("UUID");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ToppingId");

                    b.ToTable("CartTopping", (string)null);
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("InStock")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("MONEY");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("Dish", (string)null);
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("UUID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("Paid")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("UUID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("MONEY");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("UUID");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<Guid>("DishId")
                        .HasColumnType("UUID");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("UUID");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("MONEY");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.OrderTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("UUID");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("UUID");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("MONEY");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("ToppingId");

                    b.ToTable("OrderTopping", (string)null);
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("MethodCode")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("InStock")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("MONEY");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("Topping", (string)null);
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("UUID");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("DATE");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("VARCHAR(5)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.UserAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR(15)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("UUID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddress", (string)null);
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.Cart", b =>
                {
                    b.HasOne("Eatery_API.Domain.Entities.Dish", "Dish")
                        .WithMany("Carts")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eatery_API.Domain.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.CartTopping", b =>
                {
                    b.HasOne("Eatery_API.Domain.Entities.Cart", "Cart")
                        .WithMany("CartToppings")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eatery_API.Domain.Entities.Topping", "Topping")
                        .WithMany("CartToppings")
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.Order", b =>
                {
                    b.HasOne("Eatery_API.Domain.Entities.UserAddress", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eatery_API.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eatery_API.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Eatery_API.Domain.Entities.Dish", "Dish")
                        .WithMany("OrderItems")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eatery_API.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.OrderTopping", b =>
                {
                    b.HasOne("Eatery_API.Domain.Entities.OrderItem", "OrderItem")
                        .WithMany("OrderToppings")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eatery_API.Domain.Entities.Topping", "Topping")
                        .WithMany("OrderToppings")
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.User", b =>
                {
                    b.HasOne("Eatery_API.Domain.Entities.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("Eatery_API.Domain.Entities.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.UserAddress", b =>
                {
                    b.HasOne("Eatery_API.Domain.Entities.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.Account", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartToppings");
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.Dish", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.OrderItem", b =>
                {
                    b.Navigation("OrderToppings");
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.Topping", b =>
                {
                    b.Navigation("CartToppings");

                    b.Navigation("OrderToppings");
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Eatery_API.Domain.Entities.UserAddress", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
